/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.movie;

import java.sql.SQLIntegrityConstraintViolationException;
import controller.MovieController;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import model.Movie;
import view.actor.ActorQueryScreen;
import view.actor.ActorRegistrationScreen;
import view.actorFilm.ActorMovieAssociation;

public class MovieQueryScreen extends javax.swing.JFrame {

    private JFrame previousScreen;

    /**
     * Creates new form MainScreen
     */
    public MovieQueryScreen() {
        initComponents();
        initSearch();
    }

    public MovieQueryScreen(JFrame previousScreen) {
        initComponents();
        initSearch();
        this.previousScreen = previousScreen;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldActorName = new javax.swing.JTextField();
        jButtonQuery = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMovieQuery = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuRegister = new javax.swing.JMenu();
        jMenuActorRegister = new javax.swing.JMenuItem();
        jMenuMovieRegister = new javax.swing.JMenuItem();
        jMenuQuery = new javax.swing.JMenu();
        jMenuActorQuery = new javax.swing.JMenuItem();
        jMenuAssociation = new javax.swing.JMenu();
        jMenuExit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Movie Query");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                closeWindow(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel1.setText("Movie name:");

        jButtonQuery.setText("Query");
        jButtonQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryMovies(evt);
            }
        });

        jButtonEdit.setText("Edit");
        jButtonEdit.setEnabled(false);
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMovie(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        jLabel2.setText("Movie Query");

        jButtonDelete.setText("Delete");
        jButtonDelete.setEnabled(false);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMovie(evt);
            }
        });

        jTableMovieQuery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Name", "Gender", "Synopsis", "Birth Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableMovieQuery);

        jMenuRegister.setText("Register");

        jMenuActorRegister.setText("Actor");
        jMenuActorRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActorRegistration(evt);
            }
        });
        jMenuRegister.add(jMenuActorRegister);

        jMenuMovieRegister.setText("Movie");
        jMenuMovieRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMovieRegister(evt);
            }
        });
        jMenuRegister.add(jMenuMovieRegister);

        jMenuBar1.add(jMenuRegister);

        jMenuQuery.setText("Query");

        jMenuActorQuery.setText("Actor");
        jMenuActorQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActorQuery(evt);
            }
        });
        jMenuQuery.add(jMenuActorQuery);

        jMenuBar1.add(jMenuQuery);

        jMenuAssociation.setText("Association");
        jMenuAssociation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuAssociationopenActorMovieAssociation(evt);
            }
        });
        jMenuBar1.add(jMenuAssociation);

        jMenuExit.setText("Exit");
        jMenuExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit(evt);
            }
        });
        jMenuBar1.add(jMenuExit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldActorName, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonQuery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDelete)
                .addGap(178, 178, 178))
            .addGroup(layout.createSequentialGroup()
                .addGap(343, 343, 343)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonQuery)
                    .addComponent(jTextFieldActorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exit(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit
        System.exit(0);
    }//GEN-LAST:event_exit

    private void initSearch() {
        jTextFieldActorName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateTable();
            }

            private void updateTable() {
                String name = jTextFieldActorName.getText();
                searchMovie(name);
            }

        });
    }

    private void searchMovie(String name) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTableMovieQuery.getModel();
        defaultTableModel.setNumRows(0);

        jTableMovieQuery.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    jButtonEdit.setEnabled(true);
                    jButtonDelete.setEnabled(true);
                } else {
                    jButtonEdit.setEnabled(false);
                    jButtonDelete.setEnabled(false);
                }
            }
        });

        try {
            MovieController movieController = new MovieController();
            ArrayList<Movie> movies = movieController.listMovies(name);

            for (Movie movie : movies) {
                defaultTableModel.addRow(new Object[]{
                    movie.getId(),
                    movie.getName(),
                    movie.getGenre(),
                    movie.getSynopsis(),
                    movie.getReleaseDate()
                });
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void queryMovies(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryMovies
        String name = jTextFieldActorName.getText();
        searchMovie(name);
    }//GEN-LAST:event_queryMovies

    private void closeWindow(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeWindow
        this.dispose();
        previousScreen.setVisible(true);
    }//GEN-LAST:event_closeWindow

    private void deleteMovie(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMovie

        boolean success;

        int id = (Integer) jTableMovieQuery.getModel().getValueAt(jTableMovieQuery.getSelectedRow(), 0);
        String MovieNameTable = (String) jTableMovieQuery.getModel().getValueAt(jTableMovieQuery.getSelectedRow(), 1);

        try {
            MovieController movieController = new MovieController();

            int response = JOptionPane.showConfirmDialog(null, String.format("Do you want to delete the movie '%s'?", MovieNameTable), "Confirm", JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.YES_OPTION) {
                success = movieController.deleteMovie(id);

                if (success) {
                    JOptionPane.showMessageDialog(null, "Successfully deleted movie!");
                    String name = jTextFieldActorName.getText();
                    searchMovie(name);
                } else {
                    JOptionPane.showMessageDialog(null, "Error deleting movie");
                }
            }

        } catch (SQLIntegrityConstraintViolationException e) {
            JOptionPane.showMessageDialog(null, String.format("Error deleting the movie '%s'. This actor is associated with an actor.", MovieNameTable));
        }
    }//GEN-LAST:event_deleteMovie

    private void editMovie(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMovie

        int id = (Integer) jTableMovieQuery.getModel().getValueAt(jTableMovieQuery.getSelectedRow(), 0);
        String name = (String) jTableMovieQuery.getModel().getValueAt(jTableMovieQuery.getSelectedRow(), 1);
        String genre = (String) jTableMovieQuery.getModel().getValueAt(jTableMovieQuery.getSelectedRow(), 2);
        String synopsis = (String) jTableMovieQuery.getModel().getValueAt(jTableMovieQuery.getSelectedRow(), 3);
        Date releaseDate = (Date) jTableMovieQuery.getModel().getValueAt(jTableMovieQuery.getSelectedRow(), 4);

        this.setVisible(false);
        MovieEditScreen movieEditScreen = new MovieEditScreen(this);
        movieEditScreen.setVisible(true);
        movieEditScreen.getData(id, name, genre, synopsis, releaseDate);
    }//GEN-LAST:event_editMovie

    private void openMovieRegister(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMovieRegister

        this.setVisible(false);
        MovieRegistrationScreen movieRegistrationScreen = new MovieRegistrationScreen(this);
        movieRegistrationScreen.setVisible(true);

    }//GEN-LAST:event_openMovieRegister

    private void openActorRegistration(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActorRegistration
        this.setVisible(false);
        ActorRegistrationScreen actorRegistrationScreen = new ActorRegistrationScreen(this);
        actorRegistrationScreen.setVisible(true);
    }//GEN-LAST:event_openActorRegistration

    private void openActorQuery(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActorQuery

        this.setVisible(false);
        ActorQueryScreen actorQueryScreen = new ActorQueryScreen(this);
        actorQueryScreen.setVisible(true);

    }//GEN-LAST:event_openActorQuery

    private void jMenuAssociationopenActorMovieAssociation(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuAssociationopenActorMovieAssociation
        this.setVisible(false);
        ActorMovieAssociation actorMovieAssociation = new ActorMovieAssociation(this);
        actorMovieAssociation.setVisible(true);
    }//GEN-LAST:event_jMenuAssociationopenActorMovieAssociation

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieQueryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieQueryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieQueryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieQueryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieQueryScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuActorQuery;
    private javax.swing.JMenuItem jMenuActorRegister;
    private javax.swing.JMenu jMenuAssociation;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JMenuItem jMenuMovieRegister;
    private javax.swing.JMenu jMenuQuery;
    private javax.swing.JMenu jMenuRegister;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMovieQuery;
    private javax.swing.JTextField jTextFieldActorName;
    // End of variables declaration//GEN-END:variables
}
